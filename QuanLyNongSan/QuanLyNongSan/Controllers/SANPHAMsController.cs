using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using QuanLyNongSan.Models;
using System.IO;
using Newtonsoft.Json;
using System.Data.Entity.Validation;
using Core;
using QuanLyNongSan.Models.AccessData;

namespace QuanLyNongSan.Controllers
{
    public class SANPHAMsController : Controller
    {
        private QLCUNGUNGEntities db = new QLCUNGUNGEntities();
        GhiLog ghiLog = new GhiLog();

        // GET: SANPHAMs
        public ActionResult Index()
        {

            //writeFile();
            if (Session["username"] == null)
            {
                return RedirectToAction("Login", "TaiKhoans");
            }
            ViewBag.IsAdmin = "hidden-menu";
            ViewBag.Add = "disable-btn";
            if (isAdmin(Session["username"] + ""))
            {
                ViewBag.Add = "";
                ViewBag.IsAdmin = "";
            }
            ViewBag.ListNCC = db.NHACUNGCAPs.Where(x => x.isXoa == false).ToList();
            ViewBag.ListLSP = db.LOAISANPHAMs.Where(x => x.isXoa == false).ToList();
            
            return View(db.SANPHAMs.Where(x => x.isXoa == false).ToList());
        }
        private void writeFile()
        {

            string strText = "";
            StreamWriter log;
            var path = Path.Combine(Server.MapPath("~/App_Data/uploads/Quanlycungung_26.05.2020.owl"));
            log = System.IO.File.AppendText(path);

            strText += LoadChiTietDHN();
            //strText += LoadChiTietDHX();
            //strText += LoadDaiLy();
            //strText += LoadDonHangNhap();
            //strText += LoadDHX();
            //strText += LoadLoaiDaiLy();
            //strText += LoadLuuVet();
            //strText += LoadLoaiSanPham();
            //strText += LoadNhanVien();
            //strText += LoadSanPham();
            //strText += LoadTram();

            strText = strText.Replace("'", "\"");
            strText += "\n";
            log.WriteLine(strText);
            log.WriteLine();

            string final = "</rdf:RDF>\n<!--Generated by the OWL API (version 4.2.8.20170104 - 2310) https://github.com/owlcs/owlapi -->";
            log.WriteLine(final);

            log.WriteLine();
            log.Close();
        }
        private string LoadDaiLy()
        {
            string str = "";
            List<DAILY> listData = db.DAILies.Where(x => x.isXoa == false).ToList();
            foreach (DAILY dl in listData)
            {
                str += string.Format("<!-- http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#DL{0} -->\n" +
            "<owl:NamedIndividual rdf:about='http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#DL{0}'>\n" +
                "<DL_Ma rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{0}</DL_Ma>\n" +
                "<DiaChi rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{1}</DiaChi>\n" +
                "<LDL_Ma rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{2}</LDL_Ma>\n" +
                "<SoDT rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{3}</SoDT>\n" +
                "<Ten rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{4}</Ten>\n" +
            "</owl:NamedIndividual>\n", dl.MaDL, dl.DiaChi, dl.MaLoai, dl.SoDT, dl.Ten);
            }
            return str;
        }
        private string LoadNhaCungCap()
        {
            string str = "";
            List<NHACUNGCAP> dataList = db.NHACUNGCAPs.Where(x => x.isXoa == false).ToList();
            foreach (NHACUNGCAP ncc in dataList)
            {
                str += string.Format("<!--http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#NCC{0} -->\n" +
  "<owl:NamedIndividual rdf:about='http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#NCC{0}'>\n" +
      "<NCC_GhiChu rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{1}</NCC_GhiChu>\n" +
      "<NCC_Ma rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{2}</NCC_Ma>\n" +
      "<NCC_Ten rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{3}</NCC_Ten>\n" +
  "</owl:NamedIndividual>\n", ncc.MaNCC, ncc.GhiChu, ncc.MaNCC, ncc.TenNhaCC);
            }
            return str;
        }
        private string LoadLoaiDaiLy()
        {
            string str = "";
            List<LOAIDAILY> listData = db.LOAIDAILies.Where(x => x.isXoa == false).ToList();
            foreach (LOAIDAILY dl in listData)
            {
                str += string.Format("<!-- http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#LoaiDL{0} -->\n" +
                 "<owl:NamedIndividual rdf:about='http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#LoaiDL{0}'>\n" +
                     "<Chietkhau rdf:datatype='http://www.w3.org/2001/XMLSchema#byte'>{1}</Chietkhau>\n" +
                     "<DL_Cap rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{2}</DL_Cap>\n" +
                     "<LDL_Ma rdf:datatype='http://www.w3.org/2001/XMLSchema#byte'>{3}</LDL_Ma>\n" +
                 "</owl:NamedIndividual>\n", dl.MaLoai, dl.MucChietKhau, dl.Cap, dl.MaLoai);
            }
            return str;
        }
        private string LoadLuuVet()
        {
            string str = "";
            List<LUUVET> dataList = db.LUUVETs.Where(x => x.isXoa == false).ToList();
            foreach (LUUVET lv in dataList)
            {
                str += string.Format("<!-- http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#LV{0} -->\n" +
                "<owl:NamedIndividual rdf:about='http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#LV{0}'>\n" +
                "<DHX_Ma rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{0}</DHX_Ma>\n" +
                "<LVTrangThai rdf:datatype='http://www.w3.org/2001/XMLSchema#boolean'>{1}</LVTrangThai>\n" +
                "<MaNhanVien rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{2}</MaNhanVien>\n" +
                "<MaTram rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{3}</MaTram>\n" +
                "</owl:NamedIndividual>\n", lv.MaDHX, lv.TrangThai, lv.MaNV, lv.MaTram);
            }
            return str;
        }
        private string LoadDHX()
        {
            string str = "";
            List<DONHANGXUAT> dataList = db.DONHANGXUATs.Where(x => x.isXoa == false).ToList();
            foreach (DONHANGXUAT dhx in dataList)
            {
                str += string.Format("<!-- http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#DHX{0}-->\n" +
                "<owl:NamedIndividual rdf:about='http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#DHX{0}'>\n" +
             "<DHX_Ma rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{1}</DHX_Ma>\n" +
                "<DL_Ma rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{2}</DL_Ma>\n" +
             "<MaNhanVien rdf:datatype = 'http://www.w3.org/2001/XMLSchema#integer'>{3}</MaNhanVien>\n" +
               "<PhuongTien rdf:datatype = 'http://www.w3.org/2001/XMLSchema#string'>{4}</PhuongTien>\n" +
                 "<ThoiGian rdf:datatype = 'http://www.w3.org/2001/XMLSchema#integer'>{5}</ThoiGian>\n" +
               "</owl:NamedIndividual>\n", dhx.MaDHX, dhx.MaDHX, dhx.MaDaiLy, dhx.MaNV, dhx.PhuongTien, dhx.ThoiGian);
            }
            return str;
        }
        private string LoadChiTietDHX()
        {
            string str = "";
            int id = 1;
            List<CHITIETDONHANGXUAT> listData = db.CHITIETDONHANGXUATs.Where(x => x.isXoa == false).ToList();
            foreach (CHITIETDONHANGXUAT ct in listData)
            {
                str += string.Format("<!--http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#CTDHX{0}-->\n" +
                "<owl:NamedIndividual rdf:about='http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#CTDHX{0}'>\n" +
                    "<DHX_Ma rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{1}</DHX_Ma>\n" +
                    "<SP_Ma rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{2}</SP_Ma>\n" +
                    "<SoLuong rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{3}</SoLuong>\n" +
                "</owl:NamedIndividual>\n", id, ct.MaDHX, ct.MaSP, ct.SoLuong);
                id++;
            }
            return str;

        }
        private string LoadChiTietDHN()
        {
            string str = "";
            List<CHITIETDONHANGNHAP> dataChiTiet = db.CHITIETDONHANGNHAPs.Where(x => x.isXoa == false).ToList();
            int id = 1;
            foreach (CHITIETDONHANGNHAP ct in dataChiTiet)
            {
                string trangThai = ct.TrangThai == "1" ? "Hoan Thanh" : "Chua Hoan Thanh" ;
                str += string.Format(
                "<!--http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#CTDHN{0}-->\n" +
                "<owl:NamedIndividual rdf:about='http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#CTDHN{0}'>\n" +
                    "<DHN_Ma rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{1}</DHN_Ma>\n" +
                      "<SP_Ma rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{2}</SP_Ma>\n" +
                        "<SoLuong rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{3}</SoLuong>\n" +
                        "<Trang_Thai rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{4}</Trang_Thai>"+
                      "</owl:NamedIndividual>", id, ct.MaDHN, ct.MaSP, ct.SoLuong, trangThai);
                id++;
            }
            return str;
        }
        private string LoadDonHangNhap()
        {
            string str = "";
            List<DONHANGNHAP> DHNData = db.DONHANGNHAPs.Where(x => x.isXoa == false).ToList();
            foreach (DONHANGNHAP dhn in DHNData)
            {
                str += string.Format("<!--http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#DHN{0}-->\n" +
    "<owl:NamedIndividual rdf:about='http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#DHN{0}'>\n" +
        "<DHN_Ma rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{1}</DHN_Ma>\n" +
          "<DHN_MaNCC rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{2}</DHN_MaNCC>\n" +
          "<DHN_NgayNhap rdf:datatype='http://www.w3.org/2001/XMLSchema#dateTime'>{3}</DHN_NgayNhap>\n" +
        "<MaNhanVien rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{4}</MaNhanVien>\n" +
                "<PhuongTien rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{5}</PhuongTien>\n" +
        "<ThoiGian rdf:datatype = 'http://www.w3.org/2001/XMLSchema#integer'>{6}</ThoiGian>\n" +
    "</owl:NamedIndividual>", dhn.MaDHN, dhn.MaDHN, dhn.MaNhaCC, Convert.ToDateTime(dhn.NgayNhap).Date.ToString("yyyy-MM-dd"), dhn.MaNV, dhn.PhuongTien, dhn.ThoiGian);
            }
            return str;
        }
        private string LoadLoaiSanPham()
        {
            string str = "";
            List<LOAISANPHAM> dataLoaiSanPham = db.LOAISANPHAMs.Where(x => x.isXoa == false).ToList();
            foreach (LOAISANPHAM lsp in dataLoaiSanPham)
            {
                str += string.Format("<!--http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#LoaiSP{0}-->\n" +
                "<owl:NamedIndividual rdf:about='http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#LoaiSP{0}'>\n" +
                    "<rdf:type rdf:resource='http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#Loại_sản_phẩm'/>\n" +
                    "<LSP_MaLoai rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{1}</LSP_MaLoai>\n" +
                    "<LSP_TenLoai rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{2}</LSP_TenLoai>\n" +
                "</owl:NamedIndividual>", lsp.MaLoai, lsp.MaLoai, lsp.TenLoai);
            }
            return str;
        }
        private string LoadNhanVien()
        {
            string str = "";
            List<NHANVIEN> dataNhanVien = db.NHANVIENs.Where(x => x.isXoa == false).ToList();
            foreach (NHANVIEN nv in dataNhanVien)
            {
                str += string.Format("<!--http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#NV{0} -->\n" +
    "<owl:NamedIndividual rdf:about='http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#NV{0}'>\n" +
         "<Gioitinh rdf:datatype='http://www.w3.org/2001/XMLSchema#boolean'>{1}</Gioitinh>\n" +
           "<MaNhanVien rdf:datatype = 'http://www.w3.org/2001/XMLSchema#integer'>{2}</MaNhanVien>\n" +
             "<Ngaysinh rdf:datatype = 'http://www.w3.org/2001/XMLSchema#dateTime'>{3}</Ngaysinh>\n" +
                        "<Ngayvaolam rdf:datatype='http://www.w3.org/2001/XMLSchema#dateTime'>{4}</Ngayvaolam>\n" +
                                   "<Ten rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{5}</Ten>\n" +
                                     "</owl:NamedIndividual>", nv.MaNV, nv.Gioitinh, nv.MaNV, Convert.ToDateTime(nv.Ngaysinh.ToString()).Date.ToString("yyyy-MM-dd"), Convert.ToDateTime(nv.Ngaysinh.ToString()).Date.ToString("yyyy-MM-dd"), nv.Hoten);
            }
            return str;
        }
        private string LoadSanPham()
        {
            string str = "";
            List<SANPHAM> dataSanPham = db.SANPHAMs.Where(x => x.isXoa == false).ToList();
            foreach (SANPHAM sp in dataSanPham)
            {
                str += string.Format(@"<!-- http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#SP{0} -->" +
                 "\n<owl:NamedIndividual rdf:about='http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#SP{0}'>\n" +
                       "<rdf:type rdf:resource='http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#San_Pham'/>\n" +
                      "<LSP_MaLoai rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{1}</LSP_MaLoai>\n" +
                        "<SP_Gia rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{2}</SP_Gia> \n" +
                          "<SP_Ma rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{3}</SP_Ma> \n" +
                            "<SP_MaNCC rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{4}</SP_MaNCC>\n" +
                              "<SP_QCDongGoi rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{5}</SP_QCDongGoi>\n" +
                                "<SP_THSuDung rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{6}</SP_THSuDung>\n" +
                                  "<SP_Ten rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{7}</SP_Ten> \n" +
                                        "<SP_TrongLuong rdf:datatype='http://www.w3.org/2001/XMLSchema#float'>{8}</SP_TrongLuong> \n" +
                                        "<SP_GhiChu rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{9}</SP_GhiChu> \n" +
                                        "<ThoiGian rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{10}</ThoiGian>\n" +
                                        "<BaoQuan rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{11}</BaoQuan> \n" +
                                      "</owl:NamedIndividual>", sp.MaSP, sp.MaLoai, sp.Gia, sp.MaSP, sp.MaNCC, sp.QuyCachDongGoi, sp.ThoiHanSuDung, sp.TenSP, sp.TrongLuong, sp.Ghichu, sp.ThoiGian, sp.BaoQuan);
            }
            return str;
        }
        private string LoadTram()
        {
            string str = "";
            List<TRAM> dataTram = db.TRAMs.Where(x => x.isXoa == false).ToList();
            foreach (TRAM tr in dataTram)
            {
                str += string.Format("<!--http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#Tram{0} -->\n" +
                "<owl:NamedIndividual rdf:about = 'http://www.semanticweb.org/ngocbao/ontologies/2019/11/untitled-ontology-25#Tram{0}'>\n" +
                "<MaTram rdf:datatype='http://www.w3.org/2001/XMLSchema#integer'>{0}</MaTram>\n" +
                "<Ten rdf:datatype='http://www.w3.org/2001/XMLSchema#string'>{1}</Ten>\n" +
                "</owl:NamedIndividual>\n", tr.MaTram, tr.TenTram);
            }
            return str;
        }
        private bool isAdmin(string username)
        {
            TAIKHOAN tk = db.TAIKHOANs.FirstOrDefault(x => x.TaiKhoan1 == username);
            if (tk != null && tk.ISADMIN != null && (bool)tk.ISADMIN)
            {
                return true;
            }
            return false;
        }
        // GET: SANPHAMs/Details/5
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            SANPHAM sANPHAM = db.SANPHAMs.Find(id);
            if (sANPHAM == null)
            {
                return HttpNotFound();
            }
            ViewBag.LoaiSP = db.LOAISANPHAMs.FirstOrDefault(x => x.MaLoai == sANPHAM.MaLoai).TenLoai;
            ViewBag.NCC = db.NHACUNGCAPs.FirstOrDefault(x => x.MaNCC == sANPHAM.MaNCC).TenNhaCC;
            return View(sANPHAM);
        }
        public JsonResult GetInfoProduct(int? id)
        {
            SANPHAM output = new SANPHAM();
            string loai = "";
            string ncc = "";
            if (id != null)
            {
                output = db.SANPHAMs.FirstOrDefault(x => x.MaSP == id);
                loai = db.LOAISANPHAMs.FirstOrDefault(x => x.MaLoai == output.MaLoai).TenLoai;
                ncc = db.NHACUNGCAPs.FirstOrDefault(x => x.MaNCC == output.MaNCC).TenNhaCC;
            }
            return Json(new { output = output, loai = loai, ncc = ncc }, JsonRequestBehavior.AllowGet);
        }
        // GET: SANPHAMs/Create
        public ActionResult Create()
        {
            if (Session["username"] == null)
            {
                return RedirectToAction("Login", "TaiKhoans");
            }
            ViewBag.ListNCC = db.NHACUNGCAPs.Where(x => x.isXoa == false).ToList();
            ViewBag.ListLSP = db.LOAISANPHAMs.Where(x => x.isXoa == false).ToList();
            return View();
        }
        public class MyDetail
        {
            public string TenSP { set; get; }
            public string Gia { set; get; }
            public string QuyCach { set; get; }
            public string TrongLuong { set; get; }
        }
        // POST: SANPHAMs/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "MaSP,MaLoai,MaNCC,TenSP,TrongLuong,ThoiHanSuDung,QuyCachDongGoi,Gia,Ghichu,isXoa,ThoiGian,BaoQuan")] SANPHAM sANPHAM)
        {
            if (ModelState.IsValid)
            {
                sANPHAM.isXoa = false;
                db.SANPHAMs.Add(sANPHAM);
                db.SaveChanges();

                string lsp = db.LOAISANPHAMs.FirstOrDefault(x => x.MaLoai == sANPHAM.MaLoai).TenLoai;
                string ncc = db.NHACUNGCAPs.FirstOrDefault(x => x.MaNCC == sANPHAM.MaNCC).TenNhaCC;

                string str = "<b>Tên:</b> " + sANPHAM.TenSP + "</br>";
                str += "<b>Loại Sản Phẩm: </b> " + lsp + "</br>";
                str += "<b>Nhà Cung Cấp: </b> " + ncc + "</br>";
                str += "<b>Trọng Lượng: </b> " + sANPHAM.TrongLuong + "</br>";
                str += "<b>Hạn Sử Dụng: </b> " + sANPHAM.ThoiHanSuDung + "</br>";
                str += "<b>Quy Cách: </b> " + sANPHAM.QuyCachDongGoi + "</br>";
                str += "<b>Giá: </b> " + Convert.ToDecimal(sANPHAM.Gia).ToString("N0") + "</br>";
                str += "<b>Thời Gian: </b> " + sANPHAM.ThoiGian + "</br>";
                str += "<b>Bảo Quản: </b> " + sANPHAM.BaoQuan + "</br>";
                str += "<b>Ghi Chú: </b> " + sANPHAM.Ghichu + "</br>";

                ghiLog.AddNewGhiLog("Thêm mới", Session["username"] + "", str, "Sản Phẩm");

                return RedirectToAction("Index");
            }

            ViewBag.ListNCC = db.NHACUNGCAPs.Where(x => x.isXoa == false).ToList();
            ViewBag.ListLSP = db.LOAISANPHAMs.Where(x => x.isXoa == false).ToList();
            return View(sANPHAM);
        }

        // GET: SANPHAMs/Edit/5
        public ActionResult Edit(int? id)
        {
            if (Session["username"] == null)
            {
                return RedirectToAction("Login", "TaiKhoans");
            }
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            SANPHAM sANPHAM = db.SANPHAMs.Find(id);
            if (sANPHAM == null)
            {
                return HttpNotFound();
            }
            ViewBag.Name = sANPHAM.TenSP;
            ViewBag.ListNCC = db.NHACUNGCAPs.Where(x => x.isXoa == false).ToList();
            ViewBag.ListLSP = db.LOAISANPHAMs.Where(x => x.isXoa == false).ToList();
            return View(sANPHAM);
        }

        // POST: SANPHAMs/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "MaSP,MaLoai,MaNCC,TenSP,TrongLuong,ThoiHanSuDung,QuyCachDongGoi,Gia,Ghichu,isXoa,ThoiGian,BaoQuan")] SANPHAM sANPHAM)
        {
            if (ModelState.IsValid)
            {
                SANPHAM spCu = db.SANPHAMs.AsNoTracking().FirstOrDefault(x => x.MaSP == sANPHAM.MaSP);

                string lspOld = db.LOAISANPHAMs.FirstOrDefault(x => x.MaLoai == spCu.MaLoai).TenLoai;
                string nccOld = db.NHACUNGCAPs.FirstOrDefault(x => x.MaNCC == spCu.MaNCC).TenNhaCC;

                sANPHAM.isXoa = false;
                db.Entry(sANPHAM).State = EntityState.Modified;
                db.SaveChanges();

                string lspNew = db.LOAISANPHAMs.FirstOrDefault(x => x.MaLoai == sANPHAM.MaLoai).TenLoai;
                string nccNew = db.NHACUNGCAPs.FirstOrDefault(x => x.MaNCC == sANPHAM.MaNCC).TenNhaCC;

                string str = "<b>Tên:</b> " + spCu.TenSP + " => " + sANPHAM.TenSP + "</br>";
                str += "<b>Loại Sản Phẩm: </b> " + lspOld + " => " + lspNew + "</br>";
                str += "<b>Nhà Cung Cấp: </b> " + nccOld + " => " + nccNew + "</br>";
                str += "<b>Trọng Lượng: </b> " + spCu.TrongLuong + " => " + sANPHAM.TrongLuong + "</br>";
                str += "<b>Hạn Sử Dụng: </b> " + spCu.ThoiHanSuDung + " => " + sANPHAM.ThoiHanSuDung + "</br>";
                str += "<b>Quy Cách: </b> " + spCu.QuyCachDongGoi + " => " + sANPHAM.QuyCachDongGoi + "</br>";
                str += "<b>Giá: </b> " + Convert.ToDecimal(spCu.Gia).ToString("N0") + " => " + Convert.ToDecimal(sANPHAM.Gia).ToString("N0") + "</br>";
                str += "<b>Thời Gian: </b> " + spCu.ThoiGian + " => " + sANPHAM.ThoiGian + "</br>";
                str += "<b>Bảo Quản: </b> " + spCu.BaoQuan + " => " + sANPHAM.BaoQuan + "</br>";
                str += "<b>Ghi Chú: </b> " + spCu.Ghichu + " => " + sANPHAM.Ghichu + "</br>";

                ghiLog.AddNewGhiLog("Sửa", Session["username"] + "", str, "Sản Phẩm");

                return RedirectToAction("Index");
            }

            ViewBag.ListNCC = db.NHACUNGCAPs.Where(x => x.isXoa == false).ToList();
            ViewBag.ListLSP = db.LOAISANPHAMs.Where(x => x.isXoa == false).ToList();
            return View(sANPHAM);
        }

        public ActionResult Delete(int id)
        {
            if (Session["username"] == null)
            {
                return RedirectToAction("Login", "TaiKhoans");
            }
            SANPHAM sANPHAM = db.SANPHAMs.Find(id);
            if (sANPHAM == null)
            {
                return HttpNotFound();
            }
            sANPHAM.isXoa = true;
            db.Entry(sANPHAM).State = EntityState.Modified;
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        public ActionResult GetAllLogHistory()
        {
            return View(ghiLog.GetAllGhiLog());
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
